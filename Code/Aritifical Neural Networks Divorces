{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "8342ce37-5261-4e67-81c1-6fb0c06a7c7c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.models import Sequential #ANN \n",
    "from keras.layers import Dense #ANN \n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "50cebb09-79bf-4f61-94cc-5a15d763eba6",
   "metadata": {},
   "outputs": [],
   "source": [
    "df1 = pd.read_csv(\"https://raw.githubusercontent.com/FrediDSF/Divorces-Prediction-Models/main/Data/CH_Entire/Processed/Features_CH_accumulated_p1k.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "c6ca9370-8e2f-4e89-b8a9-9d4b78f7e179",
   "metadata": {},
   "outputs": [],
   "source": [
    "np.set_printoptions(suppress=True) #Removes scientific notation from numpy arrays "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "f242993d-9b9d-4d10-8409-9248115eb420",
   "metadata": {},
   "outputs": [],
   "source": [
    "df1.drop(columns = [\"Unnamed: 0\"], inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "0755131a-4571-42f8-aecc-2565d06debd9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Divorces_p1k</th>\n",
       "      <th>Pre_school_p1k</th>\n",
       "      <th>Primary_school_p1k</th>\n",
       "      <th>Secondary_school_p1k</th>\n",
       "      <th>SP</th>\n",
       "      <th>CVP</th>\n",
       "      <th>SVP</th>\n",
       "      <th>Foreigners_p1k</th>\n",
       "      <th>Cars_p1k</th>\n",
       "      <th>Average_age_when_married</th>\n",
       "      <th>Average_duration_of_marriage_when_divorced</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.687560</td>\n",
       "      <td>23.699733</td>\n",
       "      <td>62.028452</td>\n",
       "      <td>51.348497</td>\n",
       "      <td>21.7</td>\n",
       "      <td>17.3</td>\n",
       "      <td>21.9</td>\n",
       "      <td>182.667177</td>\n",
       "      <td>652.672116</td>\n",
       "      <td>29.2</td>\n",
       "      <td>12.964749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.433017</td>\n",
       "      <td>23.540068</td>\n",
       "      <td>61.610565</td>\n",
       "      <td>51.002561</td>\n",
       "      <td>21.7</td>\n",
       "      <td>17.3</td>\n",
       "      <td>21.9</td>\n",
       "      <td>184.870275</td>\n",
       "      <td>666.123467</td>\n",
       "      <td>29.4</td>\n",
       "      <td>14.385246</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.935315</td>\n",
       "      <td>23.201974</td>\n",
       "      <td>59.836670</td>\n",
       "      <td>50.092859</td>\n",
       "      <td>18.6</td>\n",
       "      <td>15.0</td>\n",
       "      <td>33.5</td>\n",
       "      <td>185.021570</td>\n",
       "      <td>676.257228</td>\n",
       "      <td>29.5</td>\n",
       "      <td>13.528438</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.092547</td>\n",
       "      <td>22.985631</td>\n",
       "      <td>58.533742</td>\n",
       "      <td>50.082586</td>\n",
       "      <td>18.6</td>\n",
       "      <td>15.0</td>\n",
       "      <td>33.5</td>\n",
       "      <td>190.259850</td>\n",
       "      <td>700.116233</td>\n",
       "      <td>29.8</td>\n",
       "      <td>13.670864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.188437</td>\n",
       "      <td>22.166179</td>\n",
       "      <td>57.204365</td>\n",
       "      <td>50.771036</td>\n",
       "      <td>18.6</td>\n",
       "      <td>15.0</td>\n",
       "      <td>33.5</td>\n",
       "      <td>193.385104</td>\n",
       "      <td>694.007569</td>\n",
       "      <td>29.7</td>\n",
       "      <td>13.958332</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Divorces_p1k  Pre_school_p1k  Primary_school_p1k  Secondary_school_p1k  \\\n",
       "0      2.687560       23.699733           62.028452             51.348497   \n",
       "1      1.433017       23.540068           61.610565             51.002561   \n",
       "2      1.935315       23.201974           59.836670             50.092859   \n",
       "3      2.092547       22.985631           58.533742             50.082586   \n",
       "4      2.188437       22.166179           57.204365             50.771036   \n",
       "\n",
       "     SP   CVP   SVP  Foreigners_p1k    Cars_p1k  Average_age_when_married  \\\n",
       "0  21.7  17.3  21.9      182.667177  652.672116                      29.2   \n",
       "1  21.7  17.3  21.9      184.870275  666.123467                      29.4   \n",
       "2  18.6  15.0  33.5      185.021570  676.257228                      29.5   \n",
       "3  18.6  15.0  33.5      190.259850  700.116233                      29.8   \n",
       "4  18.6  15.0  33.5      193.385104  694.007569                      29.7   \n",
       "\n",
       "   Average_duration_of_marriage_when_divorced  \n",
       "0                                   12.964749  \n",
       "1                                   14.385246  \n",
       "2                                   13.528438  \n",
       "3                                   13.670864  \n",
       "4                                   13.958332  "
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "7ab019c0-3a5c-4b6a-b433-7e545717d939",
   "metadata": {},
   "outputs": [],
   "source": [
    "TargetVariable = [\"Divorces_p1k\"] #define the target value, equal to the divroce rate "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "a892f27a-a603-4909-8103-244397da4898",
   "metadata": {},
   "outputs": [],
   "source": [
    "Predictors = [\"Pre_school_p1k\", \"Primary_school_p1k\", \"Secondary_school_p1k\", \"SP\", \"CVP\", \"SVP\", \"Foreigners_p1k\", \"Cars_p1k\", \"Average_duration_of_marriage_when_divorced\", \"Average_age_when_married\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "32ba0344-4aa1-4871-8a0a-e2f026fbb558",
   "metadata": {},
   "outputs": [],
   "source": [
    "X=df1[Predictors].values #map features onto x\n",
    "y=df1[TargetVariable].values #set target value as your y-variable "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "ee5ecdcf-85ea-4df5-9701-3eb775bc59cf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(473, 1)"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "809b1eda-6b12-4ae4-a1ba-50a48df9ac54",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Here I standardize the data\n",
    "PredictorScaler=StandardScaler()\n",
    "TargetVarScaler=StandardScaler()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "50c4d5eb-0527-4885-b99c-f30ff5341dea",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Here I store the fit objective for later usage \n",
    "PredictorScalerFit=PredictorScaler.fit(X)\n",
    "TargetVarScalerFit=TargetVarScaler.fit(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "7c24c6c6-88a4-4a72-88e5-1cd7b00fa78e",
   "metadata": {},
   "outputs": [],
   "source": [
    "X=PredictorScalerFit.transform(X)\n",
    "y=TargetVarScalerFit.transform(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "e918e365-e4d6-476d-8770-4a76d130d562",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Split the Data into testing and training, with a ratio of 70% to 30% \n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "70b3d385-cafd-44af-aef0-e16162fc5401",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(331, 10)\n",
      "(331, 1)\n",
      "(142, 10)\n",
      "(142, 1)\n"
     ]
    }
   ],
   "source": [
    "#data check to make sure that 70% is in the traninig and 30% is in the testing \n",
    "print(X_train.shape)\n",
    "print(y_train.shape)\n",
    "print(X_test.shape)\n",
    "print(y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "b75ad9f6-4a50-4a9d-8eda-35c3c8d6d59a",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n",
      "67/67 [==============================] - 1s 4ms/step - loss: 1.1151\n",
      "Epoch 2/50\n",
      "67/67 [==============================] - 0s 4ms/step - loss: 1.0256\n",
      "Epoch 3/50\n",
      "67/67 [==============================] - 0s 3ms/step - loss: 0.7692\n",
      "Epoch 4/50\n",
      "67/67 [==============================] - 0s 2ms/step - loss: 0.7167\n",
      "Epoch 5/50\n",
      "67/67 [==============================] - 0s 3ms/step - loss: 0.6972\n",
      "Epoch 6/50\n",
      "67/67 [==============================] - 0s 3ms/step - loss: 0.6789\n",
      "Epoch 7/50\n",
      "67/67 [==============================] - 0s 3ms/step - loss: 0.6631\n",
      "Epoch 8/50\n",
      "67/67 [==============================] - 0s 2ms/step - loss: 0.6485\n",
      "Epoch 9/50\n",
      "67/67 [==============================] - 0s 3ms/step - loss: 0.6281\n",
      "Epoch 10/50\n",
      "67/67 [==============================] - 0s 3ms/step - loss: 0.6192\n",
      "Epoch 11/50\n",
      "67/67 [==============================] - 0s 2ms/step - loss: 0.6046\n",
      "Epoch 12/50\n",
      "67/67 [==============================] - 0s 3ms/step - loss: 0.5989\n",
      "Epoch 13/50\n",
      "67/67 [==============================] - 0s 3ms/step - loss: 0.5901\n",
      "Epoch 14/50\n",
      "67/67 [==============================] - 0s 3ms/step - loss: 0.5735\n",
      "Epoch 15/50\n",
      "67/67 [==============================] - 0s 2ms/step - loss: 0.5733\n",
      "Epoch 16/50\n",
      "67/67 [==============================] - 0s 2ms/step - loss: 0.5594\n",
      "Epoch 17/50\n",
      "67/67 [==============================] - 0s 3ms/step - loss: 0.5586\n",
      "Epoch 18/50\n",
      "67/67 [==============================] - 0s 3ms/step - loss: 0.5504\n",
      "Epoch 19/50\n",
      "67/67 [==============================] - 0s 3ms/step - loss: 0.5433\n",
      "Epoch 20/50\n",
      "67/67 [==============================] - 0s 2ms/step - loss: 0.5418\n",
      "Epoch 21/50\n",
      "67/67 [==============================] - 0s 3ms/step - loss: 0.5295\n",
      "Epoch 22/50\n",
      "67/67 [==============================] - 0s 3ms/step - loss: 0.5246\n",
      "Epoch 23/50\n",
      "67/67 [==============================] - 0s 3ms/step - loss: 0.5256\n",
      "Epoch 24/50\n",
      "67/67 [==============================] - 0s 2ms/step - loss: 0.5179\n",
      "Epoch 25/50\n",
      "67/67 [==============================] - 0s 3ms/step - loss: 0.5176\n",
      "Epoch 26/50\n",
      "67/67 [==============================] - 0s 3ms/step - loss: 0.5118\n",
      "Epoch 27/50\n",
      "67/67 [==============================] - 0s 3ms/step - loss: 0.5181\n",
      "Epoch 28/50\n",
      "67/67 [==============================] - 0s 2ms/step - loss: 0.5067\n",
      "Epoch 29/50\n",
      "67/67 [==============================] - 0s 3ms/step - loss: 0.5035\n",
      "Epoch 30/50\n",
      "67/67 [==============================] - 0s 3ms/step - loss: 0.5064\n",
      "Epoch 31/50\n",
      "67/67 [==============================] - 0s 3ms/step - loss: 0.5122\n",
      "Epoch 32/50\n",
      "67/67 [==============================] - 0s 2ms/step - loss: 0.4998\n",
      "Epoch 33/50\n",
      "67/67 [==============================] - 0s 3ms/step - loss: 0.4997\n",
      "Epoch 34/50\n",
      "67/67 [==============================] - 0s 3ms/step - loss: 0.5008\n",
      "Epoch 35/50\n",
      "67/67 [==============================] - 0s 3ms/step - loss: 0.4932\n",
      "Epoch 36/50\n",
      "67/67 [==============================] - 0s 2ms/step - loss: 0.4979\n",
      "Epoch 37/50\n",
      "67/67 [==============================] - 0s 3ms/step - loss: 0.4901\n",
      "Epoch 38/50\n",
      "67/67 [==============================] - 0s 3ms/step - loss: 0.4906\n",
      "Epoch 39/50\n",
      "67/67 [==============================] - 0s 3ms/step - loss: 0.4868\n",
      "Epoch 40/50\n",
      "67/67 [==============================] - 0s 2ms/step - loss: 0.4864\n",
      "Epoch 41/50\n",
      "67/67 [==============================] - 0s 2ms/step - loss: 0.4879\n",
      "Epoch 42/50\n",
      "67/67 [==============================] - 0s 3ms/step - loss: 0.4880\n",
      "Epoch 43/50\n",
      "67/67 [==============================] - 0s 3ms/step - loss: 0.4856\n",
      "Epoch 44/50\n",
      "67/67 [==============================] - 0s 2ms/step - loss: 0.4819\n",
      "Epoch 45/50\n",
      "67/67 [==============================] - 0s 2ms/step - loss: 0.4812\n",
      "Epoch 46/50\n",
      "67/67 [==============================] - 0s 3ms/step - loss: 0.4778\n",
      "Epoch 47/50\n",
      "67/67 [==============================] - 0s 3ms/step - loss: 0.4784\n",
      "Epoch 48/50\n",
      "67/67 [==============================] - 0s 2ms/step - loss: 0.4788\n",
      "Epoch 49/50\n",
      "67/67 [==============================] - 0s 3ms/step - loss: 0.4833\n",
      "Epoch 50/50\n",
      "67/67 [==============================] - 0s 3ms/step - loss: 0.4770\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x7f9a803f5ac0>"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create ANN model with random guess concering the batch size and epochs, box after will show how to optimize it \n",
    "model = Sequential()\n",
    " \n",
    "# Defining the Input layer, the first layer \n",
    "model.add(Dense(units=7, input_dim=10, kernel_initializer='normal', activation='relu'))\n",
    " \n",
    "# Defining the Second layer of the model\n",
    "# after the first layer we don't have to specify input_dim as keras configure it automatically using a relu activation function \n",
    "model.add(Dense(units=8, kernel_initializer='normal', activation='tanh'))\n",
    "\n",
    "model.add(Dense(units=8, kernel_initializer='normal', activation='tanh'))\n",
    "\n",
    "model.add(Dense(units=8, kernel_initializer='normal', activation='tanh'))\n",
    " \n",
    "# The output neuron is a single fully connected node \n",
    "# Since we will be predicting a single number\n",
    "model.add(Dense(1, kernel_initializer='normal'))\n",
    " \n",
    "# Compiling the model\n",
    "model.compile(loss='mean_squared_error', optimizer='adam')\n",
    " \n",
    "# Fitting the ANN to the Training set\n",
    "model.fit(X_train, y_train ,batch_size = 5, epochs = 50, verbose=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "4e536c08-e844-4663-a23d-dda772a11836",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 2ms/step\n",
      "1 Parameters: batch_size: 5 - epochs: 5 Accuracy: -19.852682845650605\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 2ms/step\n",
      "2 Parameters: batch_size: 5 - epochs: 10 Accuracy: -18.45241308365162\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 3ms/step\n",
      "3 Parameters: batch_size: 5 - epochs: 20 Accuracy: 5.811572078930951\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 1ms/step\n",
      "4 Parameters: batch_size: 5 - epochs: 40 Accuracy: 56.439277594777366\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 1ms/step\n",
      "5 Parameters: batch_size: 5 - epochs: 50 Accuracy: -55.42102973536771\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 3ms/step\n",
      "6 Parameters: batch_size: 5 - epochs: 100 Accuracy: 26.0461423608091\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 1ms/step\n",
      "7 Parameters: batch_size: 10 - epochs: 5 Accuracy: 148.60055699634603\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 1ms/step\n",
      "8 Parameters: batch_size: 10 - epochs: 10 Accuracy: -1.4270635125750317\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 1ms/step\n",
      "9 Parameters: batch_size: 10 - epochs: 20 Accuracy: -30.59011262709228\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 1ms/step\n",
      "10 Parameters: batch_size: 10 - epochs: 40 Accuracy: 25.233535479646434\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 2ms/step\n",
      "11 Parameters: batch_size: 10 - epochs: 50 Accuracy: -44.259590491052705\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 1ms/step\n",
      "12 Parameters: batch_size: 10 - epochs: 100 Accuracy: 42.00163168026035\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 2ms/step\n",
      "13 Parameters: batch_size: 15 - epochs: 5 Accuracy: 102.78275385338122\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 2ms/step\n",
      "14 Parameters: batch_size: 15 - epochs: 10 Accuracy: 4.053339941871229\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 4ms/step\n",
      "15 Parameters: batch_size: 15 - epochs: 20 Accuracy: 0.38479745907960705\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 1ms/step\n",
      "16 Parameters: batch_size: 15 - epochs: 40 Accuracy: 50.09136701421276\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 1ms/step\n",
      "17 Parameters: batch_size: 15 - epochs: 50 Accuracy: 20.741173751584796\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 1ms/step\n",
      "18 Parameters: batch_size: 15 - epochs: 100 Accuracy: 86.73977630642754\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 1ms/step\n",
      "19 Parameters: batch_size: 20 - epochs: 5 Accuracy: 96.21860312445004\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 1ms/step\n",
      "20 Parameters: batch_size: 20 - epochs: 10 Accuracy: 97.52495188627432\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 3ms/step\n",
      "21 Parameters: batch_size: 20 - epochs: 20 Accuracy: 79.96132430299046\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 3ms/step\n",
      "22 Parameters: batch_size: 20 - epochs: 40 Accuracy: -16.81021228337346\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 1ms/step\n",
      "23 Parameters: batch_size: 20 - epochs: 50 Accuracy: 29.286258094608087\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 2ms/step\n",
      "24 Parameters: batch_size: 20 - epochs: 100 Accuracy: 82.27240385984017\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 1ms/step\n",
      "25 Parameters: batch_size: 25 - epochs: 5 Accuracy: 101.91283229270512\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 1ms/step\n",
      "26 Parameters: batch_size: 25 - epochs: 10 Accuracy: 45.93046662580635\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 1ms/step\n",
      "27 Parameters: batch_size: 25 - epochs: 20 Accuracy: -10.549782888576999\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 1ms/step\n",
      "28 Parameters: batch_size: 25 - epochs: 40 Accuracy: 90.48113664935833\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 1ms/step\n",
      "29 Parameters: batch_size: 25 - epochs: 50 Accuracy: -28.276887583192376\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 1ms/step\n",
      "30 Parameters: batch_size: 25 - epochs: 100 Accuracy: 84.32407260837101\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 1ms/step\n",
      "31 Parameters: batch_size: 30 - epochs: 5 Accuracy: 99.18686342105448\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 1ms/step\n",
      "32 Parameters: batch_size: 30 - epochs: 10 Accuracy: 80.6662037735942\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 1ms/step\n",
      "33 Parameters: batch_size: 30 - epochs: 20 Accuracy: 43.283398389766546\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 1ms/step\n",
      "34 Parameters: batch_size: 30 - epochs: 40 Accuracy: -10.574778245353585\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 2ms/step\n",
      "35 Parameters: batch_size: 30 - epochs: 50 Accuracy: -21.266817288569882\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 1ms/step\n",
      "36 Parameters: batch_size: 30 - epochs: 100 Accuracy: -15.130315024855676\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 1ms/step\n",
      "37 Parameters: batch_size: 35 - epochs: 5 Accuracy: 99.6982000629398\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 1ms/step\n",
      "38 Parameters: batch_size: 35 - epochs: 10 Accuracy: 105.2948304746007\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 1ms/step\n",
      "39 Parameters: batch_size: 35 - epochs: 20 Accuracy: 12.127381254130327\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 1ms/step\n",
      "40 Parameters: batch_size: 35 - epochs: 40 Accuracy: -30.76087949036537\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 2ms/step\n",
      "41 Parameters: batch_size: 35 - epochs: 50 Accuracy: 34.40181440918103\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 1ms/step\n",
      "42 Parameters: batch_size: 35 - epochs: 100 Accuracy: 69.43664750631119\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 1ms/step\n",
      "43 Parameters: batch_size: 40 - epochs: 5 Accuracy: 102.5805077864718\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 2ms/step\n",
      "44 Parameters: batch_size: 40 - epochs: 10 Accuracy: 102.49890551461525\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 4ms/step\n",
      "45 Parameters: batch_size: 40 - epochs: 20 Accuracy: -0.15187039381446255\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 1ms/step\n",
      "46 Parameters: batch_size: 40 - epochs: 40 Accuracy: -38.66349342869333\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 1ms/step\n",
      "47 Parameters: batch_size: 40 - epochs: 50 Accuracy: -29.279231287466303\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 1ms/step\n",
      "48 Parameters: batch_size: 40 - epochs: 100 Accuracy: -45.5422532681049\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_951/3595864070.py:43: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
      "  SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n"
     ]
    }
   ],
   "source": [
    "#rathen than randomly estimating the optimal batch size and number of epochs, I run a set of number combinations \n",
    "#determine the optimal value\n",
    "\n",
    "def FunctionFindBestParams(X_train, y_train, X_test, y_test):\n",
    "# Defining the list of hyper parameters to try\n",
    "    batch_size_list=[5, 10, 15, 20, 25, 30, 35, 40]\n",
    "    epoch_list  =   [5, 10, 20, 40, 50, 100]\n",
    "    \n",
    "    SearchResultsData=pd.DataFrame(columns=['TrialNumber', 'Parameters', 'Accuracy'])\n",
    "    \n",
    "    # initializing the trials\n",
    "    TrialNumber=0\n",
    "    for batch_size_trial in batch_size_list:\n",
    "        for epochs_trial in epoch_list:\n",
    "            TrialNumber+=1\n",
    "            # create ANN model\n",
    "            model = Sequential()\n",
    "            # Defining the first layer of the model\n",
    "            model.add(Dense(units=8, input_dim=X_train.shape[1], kernel_initializer='normal', activation='relu'))\n",
    " \n",
    "            # Defining the Second and Third layer and Fourth of the model\n",
    "            model.add(Dense(units=8, kernel_initializer='normal', activation='relu'))\n",
    "            \n",
    "            model.add(Dense(units=8, kernel_initializer='normal', activation='relu'))\n",
    "\n",
    "            model.add(Dense(units=8, kernel_initializer='normal', activation='relu'))\n",
    "\n",
    "            # The output neuron is a single fully connected node \n",
    "            # Since we will be predicting a single number\n",
    "            model.add(Dense(1, kernel_initializer='normal'))\n",
    " \n",
    "            # Compiling the model\n",
    "            model.compile(loss='mean_squared_error', optimizer='adam')\n",
    " \n",
    "            # Fitting the ANN to the Training set\n",
    "            model.fit(X_train, y_train ,batch_size = batch_size_trial, epochs = epochs_trial, verbose=0)\n",
    " \n",
    "            MAPE = np.mean(100 * (np.abs(y_test-model.predict(X_test))/y_test))\n",
    "            \n",
    "            # printing the results of the current iteration\n",
    "            print(TrialNumber, 'Parameters:','batch_size:', batch_size_trial,'-', 'epochs:',epochs_trial, 'Accuracy:', 100-MAPE)\n",
    "            \n",
    "            SearchResultsData=SearchResultsData.append(pd.DataFrame(data=[[TrialNumber, str(batch_size_trial)+'-'+str(epochs_trial), 100-MAPE]],\n",
    "                                                                    columns=['TrialNumber', 'Parameters', 'Accuracy'] ))\n",
    "    return(SearchResultsData)\n",
    " \n",
    " \n",
    "ResultsData=FunctionFindBestParams(X_train, y_train, X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "86f0b272-b28a-44e6-913e-fc3e96dbeaee",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Function of Best Parameters Combination, Batch Size and Epochs')"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot a graph with results above using the performance indicator MAPE\n",
    "%matplotlib inline\n",
    "ResultsData.plot(x='Parameters', y='Accuracy', figsize=(15,4), kind='line', color=\"#6171D3\")\n",
    "\n",
    "plt.axhline(y=100, color='r', linestyle='-')\n",
    "plt.ylabel(\"100-MAPE\", fontsize = 10)\n",
    "plt.xlabel(\"Parameters (Batch Size - Epochs)\", fontsize = 10)\n",
    "plt.title(\"Function of Best Parameters Combination, Batch Size and Epochs\",  fontsize = 10, fontweight = \"bold\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "f65bd739-8fd1-44a2-999f-89de06f88c75",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 2ms/step\n",
      "11/11 [==============================] - 0s 1ms/step\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pre_school_p1k</th>\n",
       "      <th>Primary_school_p1k</th>\n",
       "      <th>Secondary_school_p1k</th>\n",
       "      <th>SP</th>\n",
       "      <th>CVP</th>\n",
       "      <th>SVP</th>\n",
       "      <th>Foreigners_p1k</th>\n",
       "      <th>Cars_p1k</th>\n",
       "      <th>Average_duration_of_marriage_when_divorced</th>\n",
       "      <th>Average_age_when_married</th>\n",
       "      <th>Actual Divorces</th>\n",
       "      <th>Predicted Divorces</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>16.652652</td>\n",
       "      <td>27.951335</td>\n",
       "      <td>41.000969</td>\n",
       "      <td>28.2</td>\n",
       "      <td>9.3</td>\n",
       "      <td>13.9</td>\n",
       "      <td>305.389094</td>\n",
       "      <td>437.253191</td>\n",
       "      <td>12.719219</td>\n",
       "      <td>31.3</td>\n",
       "      <td>2.948408</td>\n",
       "      <td>2.298339</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>15.774872</td>\n",
       "      <td>63.163567</td>\n",
       "      <td>33.959517</td>\n",
       "      <td>26.1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>31.8</td>\n",
       "      <td>121.732389</td>\n",
       "      <td>661.264112</td>\n",
       "      <td>13.591797</td>\n",
       "      <td>29.5</td>\n",
       "      <td>2.093582</td>\n",
       "      <td>2.345849</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>17.817935</td>\n",
       "      <td>45.037846</td>\n",
       "      <td>40.701574</td>\n",
       "      <td>22.9</td>\n",
       "      <td>12.1</td>\n",
       "      <td>22.5</td>\n",
       "      <td>184.179756</td>\n",
       "      <td>671.751920</td>\n",
       "      <td>15.271556</td>\n",
       "      <td>30.7</td>\n",
       "      <td>2.213955</td>\n",
       "      <td>2.277457</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>18.245945</td>\n",
       "      <td>59.181293</td>\n",
       "      <td>30.882026</td>\n",
       "      <td>0.0</td>\n",
       "      <td>36.6</td>\n",
       "      <td>24.6</td>\n",
       "      <td>110.475450</td>\n",
       "      <td>722.589425</td>\n",
       "      <td>14.224969</td>\n",
       "      <td>30.1</td>\n",
       "      <td>1.138636</td>\n",
       "      <td>1.445911</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>17.134030</td>\n",
       "      <td>53.802281</td>\n",
       "      <td>29.515209</td>\n",
       "      <td>4.8</td>\n",
       "      <td>29.1</td>\n",
       "      <td>29.1</td>\n",
       "      <td>130.180608</td>\n",
       "      <td>807.081749</td>\n",
       "      <td>16.771159</td>\n",
       "      <td>32.0</td>\n",
       "      <td>1.948669</td>\n",
       "      <td>1.443570</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Pre_school_p1k  Primary_school_p1k  Secondary_school_p1k    SP   CVP   SVP  \\\n",
       "0       16.652652           27.951335             41.000969  28.2   9.3  13.9   \n",
       "1       15.774872           63.163567             33.959517  26.1   1.0  31.8   \n",
       "2       17.817935           45.037846             40.701574  22.9  12.1  22.5   \n",
       "3       18.245945           59.181293             30.882026   0.0  36.6  24.6   \n",
       "4       17.134030           53.802281             29.515209   4.8  29.1  29.1   \n",
       "\n",
       "   Foreigners_p1k    Cars_p1k  Average_duration_of_marriage_when_divorced  \\\n",
       "0      305.389094  437.253191                                   12.719219   \n",
       "1      121.732389  661.264112                                   13.591797   \n",
       "2      184.179756  671.751920                                   15.271556   \n",
       "3      110.475450  722.589425                                   14.224969   \n",
       "4      130.180608  807.081749                                   16.771159   \n",
       "\n",
       "   Average_age_when_married  Actual Divorces  Predicted Divorces  \n",
       "0                      31.3         2.948408            2.298339  \n",
       "1                      29.5         2.093582            2.345849  \n",
       "2                      30.7         2.213955            2.277457  \n",
       "3                      30.1         1.138636            1.445911  \n",
       "4                      32.0         1.948669            1.443570  "
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Fitting the ANN to the Training set using the optimal combination of parameters detemrined abov\n",
    "#these change slighly each round as the data in the training set is not always the same \n",
    "\n",
    "model.fit(X_train, y_train ,batch_size = 30, epochs = 5, verbose=0)\n",
    " \n",
    "# Generating Predictions on testing data\n",
    "Predictions=model.predict(X_test)\n",
    " \n",
    "# Scaling the predicted Price data back to original divorce scale\n",
    "Predictions=TargetVarScalerFit.inverse_transform(Predictions)\n",
    " \n",
    "# Scaling the y_test Price data back to original divorce scale\n",
    "y_test_orig=TargetVarScalerFit.inverse_transform(y_test)\n",
    "\n",
    "#relates to adapting and reverting the train data back to divorce scale \n",
    "y_train_orig=TargetVarScalerFit.inverse_transform(y_train)\n",
    "Predictions_Train = model.predict(X_train)\n",
    "Predictions_Train = TargetVarScalerFit.inverse_transform(Predictions_Train)\n",
    "\n",
    "\n",
    "# Scaling the test data back to original scale\n",
    "Test_Data=PredictorScalerFit.inverse_transform(X_test)\n",
    "\n",
    "#create a new df with the actual divorces rates and the predicted divorces determined by the testing data set\n",
    "TestingData=pd.DataFrame(data=Test_Data, columns=Predictors)\n",
    "TestingData['Actual Divorces']=y_test_orig\n",
    "TestingData['Predicted Divorces']=Predictions\n",
    "TestingData.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "3e12e44a-1fd4-4774-bb92-2e157b578fa9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pre_school_p1k</th>\n",
       "      <th>Primary_school_p1k</th>\n",
       "      <th>Secondary_school_p1k</th>\n",
       "      <th>SP</th>\n",
       "      <th>CVP</th>\n",
       "      <th>SVP</th>\n",
       "      <th>Foreigners_p1k</th>\n",
       "      <th>Cars_p1k</th>\n",
       "      <th>Average_duration_of_marriage_when_divorced</th>\n",
       "      <th>Average_age_when_married</th>\n",
       "      <th>Actual Divorces</th>\n",
       "      <th>Predicted Divorces Train</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>17.064802</td>\n",
       "      <td>54.389963</td>\n",
       "      <td>32.898528</td>\n",
       "      <td>23.0</td>\n",
       "      <td>5.1</td>\n",
       "      <td>32.6</td>\n",
       "      <td>226.557180</td>\n",
       "      <td>712.308136</td>\n",
       "      <td>14.635501</td>\n",
       "      <td>29.8</td>\n",
       "      <td>2.291896</td>\n",
       "      <td>2.523898</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>18.661937</td>\n",
       "      <td>53.487559</td>\n",
       "      <td>29.904067</td>\n",
       "      <td>11.5</td>\n",
       "      <td>8.9</td>\n",
       "      <td>28.8</td>\n",
       "      <td>224.742680</td>\n",
       "      <td>767.437794</td>\n",
       "      <td>15.382804</td>\n",
       "      <td>30.1</td>\n",
       "      <td>1.998601</td>\n",
       "      <td>1.848017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>20.600953</td>\n",
       "      <td>50.911013</td>\n",
       "      <td>44.582790</td>\n",
       "      <td>24.8</td>\n",
       "      <td>13.0</td>\n",
       "      <td>15.9</td>\n",
       "      <td>172.345208</td>\n",
       "      <td>633.244469</td>\n",
       "      <td>14.992123</td>\n",
       "      <td>29.6</td>\n",
       "      <td>1.973767</td>\n",
       "      <td>2.569679</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>20.166559</td>\n",
       "      <td>53.081611</td>\n",
       "      <td>48.887203</td>\n",
       "      <td>19.7</td>\n",
       "      <td>17.5</td>\n",
       "      <td>30.3</td>\n",
       "      <td>199.163902</td>\n",
       "      <td>712.864880</td>\n",
       "      <td>15.272013</td>\n",
       "      <td>29.9</td>\n",
       "      <td>2.806130</td>\n",
       "      <td>2.465055</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>19.383441</td>\n",
       "      <td>65.024852</td>\n",
       "      <td>33.464509</td>\n",
       "      <td>8.3</td>\n",
       "      <td>29.0</td>\n",
       "      <td>21.3</td>\n",
       "      <td>193.287568</td>\n",
       "      <td>725.419161</td>\n",
       "      <td>15.167552</td>\n",
       "      <td>30.0</td>\n",
       "      <td>2.216645</td>\n",
       "      <td>2.012917</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Pre_school_p1k  Primary_school_p1k  Secondary_school_p1k    SP   CVP   SVP  \\\n",
       "0       17.064802           54.389963             32.898528  23.0   5.1  32.6   \n",
       "1       18.661937           53.487559             29.904067  11.5   8.9  28.8   \n",
       "2       20.600953           50.911013             44.582790  24.8  13.0  15.9   \n",
       "3       20.166559           53.081611             48.887203  19.7  17.5  30.3   \n",
       "4       19.383441           65.024852             33.464509   8.3  29.0  21.3   \n",
       "\n",
       "   Foreigners_p1k    Cars_p1k  Average_duration_of_marriage_when_divorced  \\\n",
       "0      226.557180  712.308136                                   14.635501   \n",
       "1      224.742680  767.437794                                   15.382804   \n",
       "2      172.345208  633.244469                                   14.992123   \n",
       "3      199.163902  712.864880                                   15.272013   \n",
       "4      193.287568  725.419161                                   15.167552   \n",
       "\n",
       "   Average_age_when_married  Actual Divorces  Predicted Divorces Train  \n",
       "0                      29.8         2.291896                  2.523898  \n",
       "1                      30.1         1.998601                  1.848017  \n",
       "2                      29.6         1.973767                  2.569679  \n",
       "3                      29.9         2.806130                  2.465055  \n",
       "4                      30.0         2.216645                  2.012917  "
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Careful this maps the predicitons of the training data set and not the testing, used to calculate the MAE for the training dataset\n",
    "Test_Data1=PredictorScalerFit.inverse_transform(X_train)\n",
    "\n",
    "TestingData1=pd.DataFrame(data=Test_Data1, columns=Predictors)\n",
    "TestingData1['Actual Divorces']= y_train_orig\n",
    "TestingData1['Predicted Divorces Train']= Predictions_Train\n",
    "TestingData1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "69031431-6b4b-4843-9301-ac94160368c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Create a new column with the absolute percentage error, using the formula mentioed below.\n",
    "APE=100*(abs(TestingData['Actual Divorces']-TestingData['Predicted Divorces'])/TestingData['Actual Divorces'])\n",
    "TestingData['APE']=APE\n",
    "\n",
    "print('The Accuracy of ANN model is:', 100-np.mean(APE))\n",
    "TestingData"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8a7ee3c1-7e8a-4c8e-867b-5dfb7f09ccbf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compute the MAE of our new model\n",
    "mae2_Test = np.mean(np.abs(TestingData[\"Actual Divorces\"] - TestingData[\"Predicted Divorces\"]))\n",
    "mae2_Test # Display the MAE Test Data Set "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bd7c3b90-2f89-4f28-a07d-6e6b671f20e9",
   "metadata": {},
   "outputs": [],
   "source": [
    "mae2_Train = np.mean(np.abs(TestingData1[\"Actual Divorces\"] - TestingData1[\"Predicted Divorces Train\"]))\n",
    "mae2_Train # Display the MAE Train Data Set  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "75eaf011-5f8e-42e8-b05d-b4e00ec70833",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import r2_score #alllows for the computation of the r2 score "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1e31d8ee-0ab4-4893-ad19-394e54310cfd",
   "metadata": {},
   "outputs": [],
   "source": [
    "PredictionsTest_y=model.predict(X_test)\n",
    "\n",
    "PredictionsTrain_y=model.predict(X_train)\n",
    "\n",
    "r2_train = r2_score(y_train, PredictionsTrain_y)\n",
    "r2_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a0e16117-506d-46c7-a55b-d7799a83c0c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "r2_test = r2_score(y_test, PredictionsTest_y)\n",
    "r2_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "37fdf4c5-3c11-4298-889f-0288f4336ddb",
   "metadata": {},
   "outputs": [],
   "source": [
    "#the graph blow uses the computated values for the MAE and R2 Score and shows then in tow figures. \n",
    "import matplotlib.font_manager as font_manager\n",
    "\n",
    "fig, axs = plt.subplots(1, 2, figsize=(9, 5))\n",
    "width = .75 # Bar width\n",
    "\n",
    "axs[0].bar(0, mae2_Train, width, color=\"#6171D3\")\n",
    "axs[1].bar(0 + width, r2_train, width, color=\"#6171D3\")\n",
    "axs[0].bar(1, mae2_Test, width, color=\"#6171D3\")\n",
    "axs[1].bar(1 + width, r2_test, width, color=\"#6171D3\")\n",
    "\n",
    "\n",
    "# Plot titles\n",
    "axs[0].set_title(\"Mean Absolute Error\", fontsize = 10, fontweight = \"bold\")\n",
    "axs[1].set_title(\"R²\", fontsize = 10, fontweight = \"bold\")\n",
    "\n",
    "axs[0].set_xlabel(\"Training and Testing Models\", fontsize = 10)\n",
    "axs[0].set_ylabel(\"Mean Absolute Error\", fontsize = 10)\n",
    "axs[1].set_xlabel(\"Training and Testing Models\", fontsize = 10)\n",
    "axs[1].set_ylabel(\"R squared\", fontsize = 10)\n",
    "\n",
    "\n",
    "x = [0, 1]\n",
    "axs[0].set_xticks(x)\n",
    "axs[0].set_xticklabels([\"Train\",\"Test\"]) \n",
    "\n",
    "s = [0.75, 1.75]\n",
    "axs[1].set_xticks(s)\n",
    "axs[1].set_xticklabels([\"Train\",\"Test\"]) \n",
    "\n",
    "    \n",
    "font = font_manager.FontProperties(size=10)         "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
